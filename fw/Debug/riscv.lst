
riscv.elf:     file format elf32-littleriscv
riscv.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x0000049c memsz 0x0000049c flags r-x
    LOAD off    0x00002000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000000 memsz 0x00000110 flags rw-

Sections:
Idx Name           Size      VMA       LMA       File off  Algn  Flags
  0 .text          0000049c  00000000  00000000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data          00000000  10000000  10000000  0000149c  2**0  CONTENTS, ALLOC, LOAD, DATA
  2 .bss           00000008  10000000  10000000  00002000  2**2  ALLOC
  3 .stack         00000108  10000008  10000008  00002000  2**0  ALLOC
  4 .debug_line    000007c6  00000000  00000000  0000149c  2**0  CONTENTS, READONLY, DEBUGGING
  5 .debug_info    00000452  00000000  00000000  00001c62  2**0  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev  00000283  00000000  00000000  000020b4  2**0  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000088  00000000  00000000  00002338  2**3  CONTENTS, READONLY, DEBUGGING
  8 .debug_str     00003560  00000000  00000000  000023c0  2**0  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges  00000038  00000000  00000000  00005920  2**0  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro   00000d43  00000000  00000000  00005958  2**0  CONTENTS, READONLY, DEBUGGING
 11 .comment       00000039  00000000  00000000  0000669b  2**0  CONTENTS, READONLY
 12 .debug_frame   000000b8  00000000  00000000  000066d4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10000000 l    d  .bss	00000000 .bss
10000008 l    d  .stack	00000000 .stack
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./Core/Startup/start.o
00000024 l       .text	00000000 end_init_bss
00000018 l       .text	00000000 loop_init_bss
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 tm1638.c
100007f0 g       .data	00000000 __global_pointer$
0000049c g       .text	00000000 _etext
10000000 g       .bss	00000000 _sbss
0000003c g     F .text	00000048 .hidden __udivsi3
000000e8 g     F .text	00000034 GPIO_Init
10000000 g       .data	00000000 _sdata
10000008 g       .bss	00000000 _ebss
00000084 g     F .text	00000010 .hidden __umodsi3
00000244 g     F .text	00000224 dig_transform
10000004 g     O .bss	00000004 c
00000100 g       *ABS*	00000000 _stack_size
0000011c g     F .text	00000128 main
00000468 g     F .text	00000034 TM1638_Init
00000034 g     F .text	00000084 .hidden __divsi3
10000110 g       .stack	00000000 _estack
10000000 g       .data	00000000 _edata
000000b8 g     F .text	00000030 .hidden __modsi3
00000000 g       .text	00000000 start
10000000 g     O .bss	00000004 keys



Disassembly of section .text:

00000000 <start>:
start():
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:19
.global main

start:
	.option push
	.option norelax
	la gp, __global_pointer$
   0:	10000197          	auipc	gp,0x10000
   4:	7f018193          	addi	gp,gp,2032 # 100007f0 <__global_pointer$>
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:21
	.option pop
  	la sp, _estack
   8:	92018113          	addi	sp,gp,-1760 # 10000110 <_estack>
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:59
	addi x30, zero, 0
	addi x31, zero, 0
	*/

# Инициализация секции bss нулевыми значениями
	la a0, _sbss
   c:	81018513          	addi	a0,gp,-2032 # 10000000 <_edata>
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:60
	la a1, _ebss
  10:	81818593          	addi	a1,gp,-2024 # 10000008 <_ebss>
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:61
	bge a0, a1, end_init_bss
  14:	00b55863          	bge	a0,a1,24 <end_init_bss>

00000018 <loop_init_bss>:
loop_init_bss():
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:63
loop_init_bss:
	sw zero, 0(a0)
  18:	00052023          	sw	zero,0(a0)
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:64
	addi a0, a0, 4
  1c:	00450513          	addi	a0,a0,4
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:65
	blt a0, a1, loop_init_bss
  20:	feb54ce3          	blt	a0,a1,18 <loop_init_bss>

00000024 <end_init_bss>:
end_init_bss():
D:\GitHub\askorv32\fw\Debug/../Core/Startup/start.S:69
end_init_bss:

# Переход к функции main
	call main
  24:	0f8000ef          	jal	ra,11c <main>
	...

00000034 <__divsi3>:
__divsi3():
  34:	06054063          	bltz	a0,94 <__umodsi3+0x10>
  38:	0605c663          	bltz	a1,a4 <__umodsi3+0x20>

0000003c <__udivsi3>:
  3c:	00058613          	mv	a2,a1
  40:	00050593          	mv	a1,a0
  44:	fff00513          	li	a0,-1
  48:	02060c63          	beqz	a2,80 <__udivsi3+0x44>
  4c:	00100693          	li	a3,1
  50:	00b67a63          	bgeu	a2,a1,64 <__udivsi3+0x28>
  54:	00c05863          	blez	a2,64 <__udivsi3+0x28>
  58:	00161613          	slli	a2,a2,0x1
  5c:	00169693          	slli	a3,a3,0x1
  60:	feb66ae3          	bltu	a2,a1,54 <__udivsi3+0x18>
  64:	00000513          	li	a0,0
  68:	00c5e663          	bltu	a1,a2,74 <__udivsi3+0x38>
  6c:	40c585b3          	sub	a1,a1,a2
  70:	00d56533          	or	a0,a0,a3
  74:	0016d693          	srli	a3,a3,0x1
  78:	00165613          	srli	a2,a2,0x1
  7c:	fe0696e3          	bnez	a3,68 <__udivsi3+0x2c>
  80:	00008067          	ret

00000084 <__umodsi3>:
  84:	00008293          	mv	t0,ra
  88:	fb5ff0ef          	jal	ra,3c <__udivsi3>
  8c:	00058513          	mv	a0,a1
  90:	00028067          	jr	t0
  94:	40a00533          	neg	a0,a0
  98:	0005d863          	bgez	a1,a8 <__umodsi3+0x24>
  9c:	40b005b3          	neg	a1,a1
  a0:	f9dff06f          	j	3c <__udivsi3>
  a4:	40b005b3          	neg	a1,a1
  a8:	00008293          	mv	t0,ra
  ac:	f91ff0ef          	jal	ra,3c <__udivsi3>
  b0:	40a00533          	neg	a0,a0
  b4:	00028067          	jr	t0

000000b8 <__modsi3>:
__modsi3():
  b8:	00008293          	mv	t0,ra
  bc:	0005ca63          	bltz	a1,d0 <__modsi3+0x18>
  c0:	00054c63          	bltz	a0,d8 <__modsi3+0x20>
  c4:	f79ff0ef          	jal	ra,3c <__udivsi3>
  c8:	00058513          	mv	a0,a1
  cc:	00028067          	jr	t0
  d0:	40b005b3          	neg	a1,a1
  d4:	fe0558e3          	bgez	a0,c4 <__modsi3+0xc>
  d8:	40a00533          	neg	a0,a0
  dc:	f61ff0ef          	jal	ra,3c <__udivsi3>
  e0:	40b00533          	neg	a0,a1
  e4:	00028067          	jr	t0

000000e8 <GPIO_Init>:
GPIO_Init():
D:\GitHub\askorv32\fw\Debug/../Core/Src/gpio.c:12
 *****************************************************************************************
 */

#include "gpio.h"

void GPIO_Init(void) {
  e8:	ff010113          	addi	sp,sp,-16
  ec:	00812623          	sw	s0,12(sp)
  f0:	01010413          	addi	s0,sp,16
D:\GitHub\askorv32\fw\Debug/../Core/Src/gpio.c:13
	GPIO->MODE = 0;
  f4:	110007b7          	lui	a5,0x11000
  f8:	0007a023          	sw	zero,0(a5) # 11000000 <__global_pointer$+0xfff810>
D:\GitHub\askorv32\fw\Debug/../Core/Src/gpio.c:14
	GPIO->OUT  = 0;
  fc:	110007b7          	lui	a5,0x11000
 100:	0007a223          	sw	zero,4(a5) # 11000004 <__global_pointer$+0xfff814>
D:\GitHub\askorv32\fw\Debug/../Core/Src/gpio.c:15
	GPIO->IN   = 0;
 104:	110007b7          	lui	a5,0x11000
 108:	0007a423          	sw	zero,8(a5) # 11000008 <__global_pointer$+0xfff818>
D:\GitHub\askorv32\fw\Debug/../Core/Src/gpio.c:16
}
 10c:	00000013          	nop
 110:	00c12403          	lw	s0,12(sp)
 114:	01010113          	addi	sp,sp,16
 118:	00008067          	ret

0000011c <main>:
main():
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:22
//unsigned int globalvar = 5;
unsigned int c;
unsigned int keys = 0;
unsigned int tn_keys = 0;

int main(void) {
 11c:	fd010113          	addi	sp,sp,-48
 120:	02112623          	sw	ra,44(sp)
 124:	02812423          	sw	s0,40(sp)
 128:	03010413          	addi	s0,sp,48
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:24
	//#1 Инициализация периферийных устройства
	GPIO_Init();
 12c:	fbdff0ef          	jal	ra,e8 <GPIO_Init>
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:25
	TM1638_Init();
 130:	338000ef          	jal	ra,468 <TM1638_Init>
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:26
	c = 1;
 134:	81418793          	addi	a5,gp,-2028 # 10000004 <c>
 138:	00100713          	li	a4,1
 13c:	00e7a023          	sw	a4,0(a5)
 140:	fff00793          	li	a5,-1
 144:	fef42223          	sw	a5,-28(s0)
GPIO_PinsMode():
D:\GitHub\askorv32\fw\Core\Inc/gpio.h:54
__INLINE GPIO_PinState GPIO_ReadPin(GPIO_PinName GPIO_Pin) {
	return (GPIO->IN >> GPIO_Pin) & 0x1;
}

__INLINE void GPIO_PinsMode(uint32_t PinsDir) {
	GPIO->MODE = PinsDir;
 148:	110007b7          	lui	a5,0x11000
 14c:	fe442703          	lw	a4,-28(s0)
 150:	00e7a023          	sw	a4,0(a5) # 11000000 <__global_pointer$+0xfff810>
main():
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:30
	GPIO_PinsMode(0xFFFFFFFF); //Все порты на выход

	//Инициализация переменных простого таймера
	unsigned int count = 0;
 154:	fe042623          	sw	zero,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:31
	unsigned int prescaler = 1000000;
 158:	000f47b7          	lui	a5,0xf4
 15c:	24078793          	addi	a5,a5,576 # f4240 <_etext+0xf3da4>
 160:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:32
	WRITE_STIM(STIM_Prescaler, prescaler);
 164:	130007b7          	lui	a5,0x13000
 168:	fe842703          	lw	a4,-24(s0)
 16c:	00e7a023          	sw	a4,0(a5) # 13000000 <__global_pointer$+0x2fff810>
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:33
	WRITE_STIM(STIM_CounterMode, 5); //0101 - DOWN
 170:	130007b7          	lui	a5,0x13000
 174:	00478793          	addi	a5,a5,4 # 13000004 <__global_pointer$+0x2fff814>
 178:	00500713          	li	a4,5
 17c:	00e7a023          	sw	a4,0(a5)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:34
	WRITE_STIM(STIM_CounterPeriod, 100);
 180:	130007b7          	lui	a5,0x13000
 184:	00878793          	addi	a5,a5,8 # 13000008 <__global_pointer$+0x2fff818>
 188:	06400713          	li	a4,100
 18c:	00e7a023          	sw	a4,0(a5)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:38

	while(1) {
		//#Считывание значения таймера
		count = READ_STIM(STIM_OutCount);
 190:	130007b7          	lui	a5,0x13000
 194:	01078793          	addi	a5,a5,16 # 13000010 <__global_pointer$+0x2fff820>
 198:	0007a783          	lw	a5,0(a5)
 19c:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:40

		if(count == 50) {
 1a0:	fec42703          	lw	a4,-20(s0)
 1a4:	03200793          	li	a5,50
 1a8:	00f71a63          	bne	a4,a5,1bc <main+0xa0>
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:41
			WRITE_STIM(STIM_CounterPeriod, 75);
 1ac:	130007b7          	lui	a5,0x13000
 1b0:	00878793          	addi	a5,a5,8 # 13000008 <__global_pointer$+0x2fff818>
 1b4:	04b00713          	li	a4,75
 1b8:	00e7a023          	sw	a4,0(a5)
TM1638_ReadKeys():
D:\GitHub\askorv32\fw\Core\Inc/tm1638.h:56
__INLINE void TM1638_WriteLeds(uint32_t data) {
	TM1638->LEDS = data;
}

__INLINE uint32_t TM1638_ReadKeys(void) {
	return TM1638->KEYS;
 1bc:	120007b7          	lui	a5,0x12000
 1c0:	0087a703          	lw	a4,8(a5) # 12000008 <__global_pointer$+0x1fff818>
main():
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:49
		//#Светодиоды tangnano
		//GPIO_WritePins(~c);
		//GPIO_WritePins(count);

		//#Светодиоды tm1638
		keys = TM1638_ReadKeys();
 1c4:	10000797          	auipc	a5,0x10000
 1c8:	e3c78793          	addi	a5,a5,-452 # 10000000 <_edata>
 1cc:	00e7a023          	sw	a4,0(a5)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:50
		TM1638_WriteLeds(keys);
 1d0:	10000797          	auipc	a5,0x10000
 1d4:	e3078793          	addi	a5,a5,-464 # 10000000 <_edata>
 1d8:	0007a783          	lw	a5,0(a5)
 1dc:	fcf42e23          	sw	a5,-36(s0)
TM1638_WriteLeds():
D:\GitHub\askorv32\fw\Core\Inc/tm1638.h:52
	TM1638->LEDS = data;
 1e0:	120007b7          	lui	a5,0x12000
 1e4:	fdc42703          	lw	a4,-36(s0)
 1e8:	00e7a223          	sw	a4,4(a5) # 12000004 <__global_pointer$+0x1fff814>
main():
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:54

		//#Сегментный индикатор tm1638
		//TM1638_WriteSegs(c);
		TM1638_WriteSegs(dig_transform(count));
 1ec:	fec42503          	lw	a0,-20(s0)
 1f0:	054000ef          	jal	ra,244 <dig_transform>
 1f4:	00050793          	mv	a5,a0
 1f8:	fef42023          	sw	a5,-32(s0)
TM1638_WriteSegs():
D:\GitHub\askorv32\fw\Core\Inc/tm1638.h:48
	TM1638->SEGS = data;
 1fc:	120007b7          	lui	a5,0x12000
 200:	fe042703          	lw	a4,-32(s0)
 204:	00e7a023          	sw	a4,0(a5) # 12000000 <__global_pointer$+0x1fff810>
main():
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:55
		if(keys == 1) {
 208:	10000797          	auipc	a5,0x10000
 20c:	df878793          	addi	a5,a5,-520 # 10000000 <_edata>
 210:	0007a703          	lw	a4,0(a5)
 214:	00100793          	li	a5,1
 218:	00f71c63          	bne	a4,a5,230 <main+0x114>
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:56
			WRITE_STIM(STIM_CounterMode, 13); //0101 - DOWN
 21c:	130007b7          	lui	a5,0x13000
 220:	00478793          	addi	a5,a5,4 # 13000004 <__global_pointer$+0x2fff814>
 224:	00d00713          	li	a4,13
 228:	00e7a023          	sw	a4,0(a5)
 22c:	f65ff06f          	j	190 <main+0x74>
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:59
		}
		else {
			WRITE_STIM(STIM_CounterMode, 5); //0101 - DOWN
 230:	130007b7          	lui	a5,0x13000
 234:	00478793          	addi	a5,a5,4 # 13000004 <__global_pointer$+0x2fff814>
 238:	00500713          	li	a4,5
 23c:	00e7a023          	sw	a4,0(a5)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:38
		count = READ_STIM(STIM_OutCount);
 240:	f51ff06f          	j	190 <main+0x74>

00000244 <dig_transform>:
dig_transform():
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:79
*/
		//for(int i = 0; i<100000; i++);
	}
}

unsigned int dig_transform(unsigned int digit) {
 244:	fd010113          	addi	sp,sp,-48
 248:	02112623          	sw	ra,44(sp)
 24c:	02812423          	sw	s0,40(sp)
 250:	03010413          	addi	s0,sp,48
 254:	fca42e23          	sw	a0,-36(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:80
	unsigned int d_out = 0;
 258:	fe042623          	sw	zero,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:81
	unsigned int d_in  = digit;
 25c:	fdc42783          	lw	a5,-36(s0)
 260:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:82
	d_in = d_in % 100000000;
 264:	fe842703          	lw	a4,-24(s0)
 268:	05f5e7b7          	lui	a5,0x5f5e
 26c:	10078593          	addi	a1,a5,256 # 5f5e100 <_etext+0x5f5dc64>
 270:	00070513          	mv	a0,a4
 274:	e11ff0ef          	jal	ra,84 <__umodsi3>
 278:	00050793          	mv	a5,a0
 27c:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:83
	d_out = d_out | ((d_in / 10000000) << 28);
 280:	fe842703          	lw	a4,-24(s0)
 284:	009897b7          	lui	a5,0x989
 288:	68078593          	addi	a1,a5,1664 # 989680 <_etext+0x9891e4>
 28c:	00070513          	mv	a0,a4
 290:	dadff0ef          	jal	ra,3c <__udivsi3>
 294:	00050793          	mv	a5,a0
 298:	01c79793          	slli	a5,a5,0x1c
 29c:	fec42703          	lw	a4,-20(s0)
 2a0:	00f767b3          	or	a5,a4,a5
 2a4:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:84
	d_in = d_in % 10000000;
 2a8:	fe842703          	lw	a4,-24(s0)
 2ac:	009897b7          	lui	a5,0x989
 2b0:	68078593          	addi	a1,a5,1664 # 989680 <_etext+0x9891e4>
 2b4:	00070513          	mv	a0,a4
 2b8:	dcdff0ef          	jal	ra,84 <__umodsi3>
 2bc:	00050793          	mv	a5,a0
 2c0:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:85
	d_out = d_out | ((d_in / 1000000)  << 24);
 2c4:	fe842703          	lw	a4,-24(s0)
 2c8:	000f47b7          	lui	a5,0xf4
 2cc:	24078593          	addi	a1,a5,576 # f4240 <_etext+0xf3da4>
 2d0:	00070513          	mv	a0,a4
 2d4:	d69ff0ef          	jal	ra,3c <__udivsi3>
 2d8:	00050793          	mv	a5,a0
 2dc:	01879793          	slli	a5,a5,0x18
 2e0:	fec42703          	lw	a4,-20(s0)
 2e4:	00f767b3          	or	a5,a4,a5
 2e8:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:86
	d_in = d_in % 1000000;
 2ec:	fe842703          	lw	a4,-24(s0)
 2f0:	000f47b7          	lui	a5,0xf4
 2f4:	24078593          	addi	a1,a5,576 # f4240 <_etext+0xf3da4>
 2f8:	00070513          	mv	a0,a4
 2fc:	d89ff0ef          	jal	ra,84 <__umodsi3>
 300:	00050793          	mv	a5,a0
 304:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:87
	d_out = d_out | ((d_in / 100000)   << 20);
 308:	fe842703          	lw	a4,-24(s0)
 30c:	000187b7          	lui	a5,0x18
 310:	6a078593          	addi	a1,a5,1696 # 186a0 <_etext+0x18204>
 314:	00070513          	mv	a0,a4
 318:	d25ff0ef          	jal	ra,3c <__udivsi3>
 31c:	00050793          	mv	a5,a0
 320:	01479793          	slli	a5,a5,0x14
 324:	fec42703          	lw	a4,-20(s0)
 328:	00f767b3          	or	a5,a4,a5
 32c:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:88
	d_in = d_in % 100000;
 330:	fe842703          	lw	a4,-24(s0)
 334:	000187b7          	lui	a5,0x18
 338:	6a078593          	addi	a1,a5,1696 # 186a0 <_etext+0x18204>
 33c:	00070513          	mv	a0,a4
 340:	d45ff0ef          	jal	ra,84 <__umodsi3>
 344:	00050793          	mv	a5,a0
 348:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:89
	d_out = d_out | ((d_in / 10000)    << 16);
 34c:	fe842703          	lw	a4,-24(s0)
 350:	000027b7          	lui	a5,0x2
 354:	71078593          	addi	a1,a5,1808 # 2710 <_etext+0x2274>
 358:	00070513          	mv	a0,a4
 35c:	ce1ff0ef          	jal	ra,3c <__udivsi3>
 360:	00050793          	mv	a5,a0
 364:	01079793          	slli	a5,a5,0x10
 368:	fec42703          	lw	a4,-20(s0)
 36c:	00f767b3          	or	a5,a4,a5
 370:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:90
	d_in = d_in % 10000;
 374:	fe842703          	lw	a4,-24(s0)
 378:	000027b7          	lui	a5,0x2
 37c:	71078593          	addi	a1,a5,1808 # 2710 <_etext+0x2274>
 380:	00070513          	mv	a0,a4
 384:	d01ff0ef          	jal	ra,84 <__umodsi3>
 388:	00050793          	mv	a5,a0
 38c:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:91
	d_out = d_out | ((d_in / 1000)     << 12);
 390:	fe842783          	lw	a5,-24(s0)
 394:	3e800593          	li	a1,1000
 398:	00078513          	mv	a0,a5
 39c:	ca1ff0ef          	jal	ra,3c <__udivsi3>
 3a0:	00050793          	mv	a5,a0
 3a4:	00c79793          	slli	a5,a5,0xc
 3a8:	fec42703          	lw	a4,-20(s0)
 3ac:	00f767b3          	or	a5,a4,a5
 3b0:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:92
	d_in = d_in % 1000;
 3b4:	fe842783          	lw	a5,-24(s0)
 3b8:	3e800593          	li	a1,1000
 3bc:	00078513          	mv	a0,a5
 3c0:	cc5ff0ef          	jal	ra,84 <__umodsi3>
 3c4:	00050793          	mv	a5,a0
 3c8:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:93
	d_out = d_out | ((d_in / 100)      <<  8);
 3cc:	fe842783          	lw	a5,-24(s0)
 3d0:	06400593          	li	a1,100
 3d4:	00078513          	mv	a0,a5
 3d8:	c65ff0ef          	jal	ra,3c <__udivsi3>
 3dc:	00050793          	mv	a5,a0
 3e0:	00879793          	slli	a5,a5,0x8
 3e4:	fec42703          	lw	a4,-20(s0)
 3e8:	00f767b3          	or	a5,a4,a5
 3ec:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:94
	d_in = d_in % 100;
 3f0:	fe842783          	lw	a5,-24(s0)
 3f4:	06400593          	li	a1,100
 3f8:	00078513          	mv	a0,a5
 3fc:	c89ff0ef          	jal	ra,84 <__umodsi3>
 400:	00050793          	mv	a5,a0
 404:	fef42423          	sw	a5,-24(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:95
	d_out = d_out | ((d_in / 10)       <<  4);
 408:	fe842783          	lw	a5,-24(s0)
 40c:	00a00593          	li	a1,10
 410:	00078513          	mv	a0,a5
 414:	c29ff0ef          	jal	ra,3c <__udivsi3>
 418:	00050793          	mv	a5,a0
 41c:	00479793          	slli	a5,a5,0x4
 420:	fec42703          	lw	a4,-20(s0)
 424:	00f767b3          	or	a5,a4,a5
 428:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:96
	d_out = d_out |  (d_in % 10);
 42c:	fe842783          	lw	a5,-24(s0)
 430:	00a00593          	li	a1,10
 434:	00078513          	mv	a0,a5
 438:	c4dff0ef          	jal	ra,84 <__umodsi3>
 43c:	00050793          	mv	a5,a0
 440:	00078713          	mv	a4,a5
 444:	fec42783          	lw	a5,-20(s0)
 448:	00e7e7b3          	or	a5,a5,a4
 44c:	fef42623          	sw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:97
	return d_out;
 450:	fec42783          	lw	a5,-20(s0)
D:\GitHub\askorv32\fw\Debug/../Core/Src/main.c:98
}
 454:	00078513          	mv	a0,a5
 458:	02c12083          	lw	ra,44(sp)
 45c:	02812403          	lw	s0,40(sp)
 460:	03010113          	addi	sp,sp,48
 464:	00008067          	ret

00000468 <TM1638_Init>:
TM1638_Init():
D:\GitHub\askorv32\fw\Debug/../Core/Src/tm1638.c:12
 *****************************************************************************************
 */

#include "tm1638.h"

void TM1638_Init(void) {
 468:	ff010113          	addi	sp,sp,-16
 46c:	00812623          	sw	s0,12(sp)
 470:	01010413          	addi	s0,sp,16
D:\GitHub\askorv32\fw\Debug/../Core/Src/tm1638.c:13
	TM1638->SEGS = 0;
 474:	120007b7          	lui	a5,0x12000
 478:	0007a023          	sw	zero,0(a5) # 12000000 <__global_pointer$+0x1fff810>
D:\GitHub\askorv32\fw\Debug/../Core/Src/tm1638.c:14
	TM1638->LEDS = 0;
 47c:	120007b7          	lui	a5,0x12000
 480:	0007a223          	sw	zero,4(a5) # 12000004 <__global_pointer$+0x1fff814>
D:\GitHub\askorv32\fw\Debug/../Core/Src/tm1638.c:15
	TM1638->KEYS = 0; //Можно не записывать нули
 484:	120007b7          	lui	a5,0x12000
 488:	0007a423          	sw	zero,8(a5) # 12000008 <__global_pointer$+0x1fff818>
D:\GitHub\askorv32\fw\Debug/../Core/Src/tm1638.c:16
}
 48c:	00000013          	nop
 490:	00c12403          	lw	s0,12(sp)
 494:	01010113          	addi	sp,sp,16
 498:	00008067          	ret
